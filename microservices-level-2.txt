💪 Fault Tolerance 💪:

Given in an application if there is a fault, what is the impact of that fault?
How much tolerance does the system have?

FAULT TOLERANCE = IMPACT


🛡️ Resilience 🛡️:
How many faults can a system tolerate? 
That indicates the resilience can the system tolerate and how much a system can bounce back, and can be restored.

RESILIENCE = ABILITY TO BE RESTORED


How do we do microservices resilient?

🚩 Issues with microservices 🚩 :

📽️ Scenario 1:
A microservice instance goes down.

💡 The solution is to run multiple instances (create duplicate instances).


📽️ Scenario 2:
A microservice instance is slow.

Let's say we have an external API Movie DB that is slow. Unrelated services will be slower as well.

Why are unrelated microservices affected? 
The web server can be out of resources because is occupied by too many threads that are ready for upcoming requests.

💡 The solution is to create timeouts ⏳ to free resources (remove threads).
    🍃 In SpringBoot use timeouts to RestTemplate when you make API calls.
        🍃 When somebody is not returning a response end call and return an error.

Does this solve the problem? 
Let's say we have a timer of 3 sec but the request is faster (1 sec).
That's a problem because the request is faster than the time consumed on threads.
3 sec for a request to be timed out, but 3 new requests are coming, so the issue is not solved in this case.

The issue is solved partially 🌗.


💡 Another solution is to detect which microservice is slow and not send the request to that microservice for a bit.
After a while, we can try again to send requests to see if it is recovered 😷.

This is a popular fault pattern in microservices -> Circuit Breaker Pattern 💡

Circuit breaker parameters (the triggers to break a Circuit):
    - Look at the last N requests and see how many are failing
    - How much do you wait to mark a request as a failure 

⚙️ What should we do when we don't send a request the slow microservice (when a circuit breaks)?

💡 We need a fallback 🌊, we can:
- throw an error
- return a fallback "default" response
- save previous responses (cache) and use that when possible

This is very hard to implement, but thankfully we can introduce in our 🍃 SpringBoot app 🍃 a library called Hystrix.